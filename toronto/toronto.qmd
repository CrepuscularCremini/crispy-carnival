---
title: "Population Weighted Median Access Scores by Subpopulation - City of Toronto"
format:
  html:
    code-fold: true
    page-layout: full
execute: 
  warning: false
  echo: false
jupyter: python3
---

```{python}
# drop = widgets.Dropdown(
#     options=['1', '2', '3'],
#     value='2',
#     description='Number:',
#     disabled=False,
# )


# display(drop)
# x = [1,2,3]
# y1 = [5,1,3]
# y2 = [5,2,1]
# y3 = [5,5,5]

# def on_value_change(change):
#     # with output2:
#         # print(change['new'])
#     # print(change['new'])
#     yval = change['new']
#     if yval == 1:
#         y = y1
#     elif yval == 2:
#         y = y2
#     else:
#         y = y3
#     fig = px.bar(x, y)
#     fig.show()


# drop.observe(on_value_change, names='value')

```

```{python}
import pandas as pd
import geopandas as gpd
import os

import plotly.express as px
import plotly.graph_objects as go

from IPython.display import display, Markdown
from ipyleaflet import Map, GeoData, basemaps, LayersControl, Choropleth
import ipywidgets.widgets as widgets
from branca.colormap import linear

os.chdir(r'C:\Users\Brenn\Documents\Research\sam')

from sam import column_format, pov_line, weighted_quantiles_interpolate, demographics, modes, destinations

demographics = ['Population'] + demographics

```

```{python}
gdf = pd.read_csv('TransportEquityDashboardDAs.csv', dtype = {'DAUID' : str, 'CD_UID' : str, 'CMA_UID' : str, 'CSD_UID' : str})
gdf['N_UID'] = '1'

## Toronto CD_UID = 3520
gdf.query('CD_UID == "3520"', inplace = True)

for col in demographics:
    gdf[col] = gdf[col].fillna(0).astype(int)
```

```{python}

## Load DA info

# da = gpd.read_file(r"C:\GIS\statcan\lda_000b21a_e\lda_000b21a_e.shp", dtype = {'DAUID' : str}, bbox = (7.201955e+06, 917957.217143, 7.243310e+06, 954707.351429))
# da = da.merge(gdf, on = 'DAUID', how = 'right')
# da.to_crs(epsg = 4326, inplace = True)
# da.set_index('DAUID', inplace = True)

```
```{python}
## creates a map of the DAs by accessibility score

# fig = px.choropleth(da,
#                    geojson=da.geometry,
#                    locations=da.index,
#                    color="emp_ai_wlk_csd",
#                    projection="mercator",
#                    labels={'DAUID':'Name',
#                             'emp_ai_wlk_csd' : 'Access Score'})
# fig.update_geos(fitbounds="locations", visible=False)
# fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
# fig.update_traces(marker_line_width=0)
# # fig.show()
# f2 = go.FigureWidget(fig)
```

```{python}
## Shows the DA Map

# f2.show()
```

```{python}
## Updates map (still needs interactive ipywidget to work

# col = 'emp_ai_cyc_csd'
# f2.data[0].z = da[col]
# f2.data[0].name = col
```

```{python}
pretty_mode = {'wlk' : 'Walking',
                'cyc' : 'Cycling',
                'ptp' : 'Public Transportation - Peak',
                'ptop' : 'Public Transportation - Off Peak'}
pretty_destination = {'rf' : 'Recreation Facilities',
                    'ef' : 'Primary/Seconday Education',
                    'emp' : 'Employment',
                    'ps' : 'Post-Secondary Education',
                    'hf' : 'Healthcare Facilities',
                    'caf' : 'Cultural and Arts Facilities',
                    'g1' : 'Grocery Stores (One)',
                    'g3' : 'Grocery Stores (Three)',
                    'g5' : 'Grocery Stores (Five)'}

def data_maker(dest, mode, demographics, table = None):
    # dest = 'rf'
    # mode = 'cyc'
    # demographics = demographics
    col = column_format(dest, mode, 'cd')

    df_list = []
    for dem in demographics:

        mdf_list = []
        for q in [.25, .5, .75]:
            tdf = pov_line(gdf, 'CD_UID', col, population = dem, quantile = q)
            tdf.rename(columns = {'pov' : str(q)}, inplace = True)
            mdf_list.append(tdf)

        ndf = pd.concat(mdf_list, axis = 1)
        ndf.drop(columns = 'CD_UID', inplace = True)

        ndf['demographic'] = dem
        df_list.append(ndf)

    df = pd.concat(df_list)
    df.reset_index(inplace = True, drop = True)

    df['upper'] = round(df['0.75'] - df['0.5'], 3)
    df['lower'] = round(df['0.5'] - df['0.25'], 3)
    df['median'] = round(df['0.5'], 3)

    df['demographic'] = df.demographic.apply(lambda s: s[:-4] if s[-4:] == '_num' else s)

    genpop = df.query('demographic == "Population"')['median'].values[0]
    df['pdif'] = round((df['median'] - genpop), 3)
    mv = (0 - df.pdif.min()) / (df.pdif.max() - df.pdif.min())
    mv = 0 if pd.isna(mv) else mv

    # print(genpop)
    # print(mv)
    # print(df.pdif.min())
    # print(df.pdif.max())

    fig = px.bar(df, x='median', y='demographic', color = 'pdif',
                # color_continuous_scale=px.colors.diverging.PiYG,
                color_continuous_scale=[(0, "#8e0152"), (mv, "#f7f7f7"), (1, "#276419")],
                orientation = 'h',
                error_x="upper", error_x_minus="lower",
                labels={
                        "demographic": "",
                        "median": "Weighted Median",
                        "pdif" : "Difference from<br>Full Population"
                    },
                    title=f"{pretty_mode[mode]}")
    fig.add_vline(x=genpop,
                    line_width=1, line_color="gray")
    fig.show()

    if table:
        odf = df[['demographic', 'median', 'lower', 'upper']].rename(columns = {
            'demographic' : 'subpopulation',
            'median' : 'population weighted median',
            'upper' : '75%tile',
            'lower' : '25%tile'
        })

        odf.to_excel(table, sheet_name = f"{dest}-{mode}", index = False)
     
    # use to_excel function and specify the sheet_name and index to 
    # store the dataframe in specified sheet

```

The following charts are organized by destination and show the weighted median access score for each subpopulation and transportation type.

The data uses the Toronto normalized version of the spatial access measures, meaning that the DA with the highest score in Toronto has a value of 1, and the DA with the lowest score in Toronto has a value of 0.

The below diagram shows an example of how to read each chart.

![](torontoDiagram.png)

:::: {.panel-tabset}

```{python}
#| output: asis

writer = pd.ExcelWriter("toronto.xlsx", mode="w", engine="openpyxl")

for dest in destinations:

    display(Markdown(f"## {pretty_destination[dest]}"))
    display(Markdown("::: {layout-ncol=2}"))

    display(Markdown("### Active Transportation"))
    data_maker(dest, 'wlk', demographics, writer)
    display(Markdown(f" "))
    data_maker(dest, 'cyc', demographics, writer)
    display(Markdown(f" "))

    display(Markdown("### Public Transportation"))
    data_maker(dest, 'ptp', demographics, writer)
    display(Markdown(f" "))
    data_maker(dest, 'ptop', demographics, writer)
    display(Markdown(f" "))

    display(Markdown(":::"))

writer.close()


```

::::
